call plug#begin('~/.vim/plugged')
  " completion
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'honza/vim-snippets'

  " filter
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'mattn/ctrlp-matchfuzzy'

  " Plug 'Shougo/neocomplete'
  " Plug 'Shougo/neosnippet.vim'
  " Plug 'Shougo/neosnippet-snippets'
  " Plug 'thinca/vim-quickrun'
  " Plug 'majutsushi/tagbar'
  " Plug 'wesleyche/SrcExpl'

  " nerdtree
  Plug 'scrooloose/nerdtree'
  Plug 'jistr/vim-nerdtree-tabs'
  Plug 'Xuyuanp/nerdtree-git-plugin'

  Plug 'bling/vim-airline'

  " git
  Plug 'airblade/vim-gitgutter'
  Plug 'tpope/vim-fugitive'

  " utilities
  Plug 'dhruvasagar/vim-table-mode'
  Plug 'junegunn/vim-easy-align'
  Plug 'AndrewRadev/linediff.vim'
  Plug 'LeafCage/yankround.vim'
  Plug 'osyo-manga/vim-over'
  Plug 'h1mesuke/vim-alignta'
  Plug 't9md/vim-quickhl'
  Plug 'osyo-manga/vim-anzu'
  Plug 'tpope/vim-surround'
  Plug 'nathanaelkane/vim-indent-guides'
  Plug 'tomtom/tcomment_vim'
  Plug 'kannokanno/previm'
  Plug 'tyru/open-browser.vim'
  Plug 'haya14busa/incsearch.vim'
  Plug 't9md/vim-smalls'
  Plug 'bling/vim-bufferline'
  Plug 'mbbill/undotree'
  Plug 'jiangmiao/auto-pairs'
  Plug 'tomasr/molokai'
  Plug 'bronson/vim-trailing-whitespace'
  Plug 'godlygeek/csapprox'

  " lang
  Plug 'scrooloose/syntastic'
  Plug 'davidhalter/jedi-vim', { 'for': ['python'] }
  Plug 'mattn/emmet-vim', { 'for':
        \ ['html', 'eruby', 'javascript.jsx', 'scss', 'css']
        \}
  Plug 'slim-template/vim-slim', { 'for': ['slim'] }
  Plug 'elixir-lang/vim-elixir', { 'for': ['elixir'] }
  Plug 'lambdatoast/elm.vim', { 'for': ['elm'] }
  Plug 'leshill/vim-json', { 'for': ['json'] }
  Plug 'mtscout6/syntastic-local-eslint.vim', { 'for': ['javascript.jsx'] }
  Plug 'pangloss/vim-javascript', { 'for': ['javascript.jsx'] }
  Plug 'mxw/vim-jsx', { 'for': ['javascript.jsx'] }
  Plug 'leafgarland/typescript-vim', { 'for': ['ts', 'tsx'] }
  Plug 'heavenshell/vim-tslint', { 'for': ['ts', 'tsx'] }
  Plug 'alessioalex/syntastic-local-tslint.vim', { 'for': ['ts', 'tsx'] }
    Plug 'fatih/vim-go', { 'for': ['go'] }
  Plug 'vim-jp/vim-go-extra', { 'for': ['go'] }
call plug#end()


"############################################ {{{
" coc
"############################################
if (index(g:plugs_order, 'coc.nvim') >= 0)
  let g:coc_global_extensions = [
    \ 'coc-json',
    \ 'coc-sh',
    \ 'coc-python',
    \ 'coc-go',
    \ 'coc-html',
    \ 'coc-css',
    \ 'coc-tsserver',
    \ 'coc-clangd',
    \ 'coc-solargraph'
    \ ]

  augroup MyAutoCmd
    autocmd!
  augroup END
    autocmd MyAutoCmd FileType * call s:configure_lsp()
    function! s:configure_lsp() abort
      let l:coc_filetyps = [
        \ 'dockerfile',
        \ 'bash',
        \ 'css',
        \ 'scss',
        \ 'html',
        \ 'javascript',
        \ 'json',
        \ 'markdown',
        \ 'python',
        \ 'yaml',
        \ ]
      if match(l:coc_filetyps, &filetype) == -1
        return
      endif

      " snippet
      " Use <C-j> for jump to next placeholder, it's default of coc.nvim
      let g:coc_snippet_next = '<c-j>'
      " Use <C-k> for jump to previous placeholder, it's default of coc.nvim
      let g:coc_snippet_prev = '<c-k>'
      " " Use <C-j> for both expand and jump (make expand higher priority.)
      " imap <C-j> <Plug>(coc-snippets-expand-jump)
      inoremap <silent><expr> <C-k>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

      function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
      endfunction

      let g:coc_snippet_next = '<TAB>'

      " Remap keys
      nmap <buffer> <C-]> <Plug>(coc-definition)
      nmap <buffer><silent> cgy <Plug>(coc-type-definition)
      nmap <buffer><silent> cgi <Plug>(coc-implementation)
      nmap <buffer><silent> cgr <Plug>(coc-references)
      nmap <buffer><leader>cR <Plug>(coc-rename)
      " Remap for format selected region
      vmap <buffer><leader>cf <Plug>(coc-format-selected)
      nmap <buffer><leader>cf <Plug>(coc-format-selected)
      " Remap for do codeAction of current line
      nmap <buffer><leader>cac <Plug>(coc-codeaction)
      " Diagnostic
      nmap <buffer><leader>cgd <Plug>(coc-diagnostic-info)
      nmap <buffer><leader>cgn <Plug>(coc-diagnostic-next)
      nmap <buffer><leader>cgp <Plug>(coc-diagnostic-prev)
      " Setup format selected region
      setlocal formatexpr=CocAction('formatSelected')
      " coc-git
      highlight default link GitGutterAdd           NONE
      highlight default link GitGutterChange        NONE
      highlight default link GitGutterDelete        NONE
      highlight default link GitGutterChangeDelete  NONE
      " Use K to show documentation in preview window
      nnoremap <silent> K :call <SID>show_documentation()<CR>
      function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
          execute 'h '.expand('<cword>')
        else
          call CocAction('doHover')
        endif
      endfunction

      augroup CocNvimGroup
        autocmd!
        " Highlight symbol under cursor on CursorHold
        autocmd CursorHold * silent call CocActionAsync('highlight')
        " Update signature help on jump placeholder
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
      augroup end

      command! -nargs=0 Prettier :CocCommand prettier.formatFile
    endfunction
    " Explorer
    nnoremap <silent> ge :CocCommand explorer<CR>

endif
"}}}


"############################################ {{{
" CtrlP
"############################################
if (index(g:plugs_order, 'ctrlp.vim') >= 0)
  let g:ctrlp_map = '<leader>p'
  let g:ctrlp_cmd = 'CtrlP'
  let g:ctrlp_working_path_mode = 'ra'
  let g:ctrlp_user_command = 'find %s -type f'
  set wildignore+=*/tmp/*,*.so,*.swp,*.zip
endif
"}}}


"############################################ {{{
" ctrlp-matchfuzzy
"############################################
if (index(g:plugs_order, 'ctrlp-matchfuzzy') >= 0)
  let g:ctrlp_match_func = {'match': 'ctrlp_matchfuzzy#matcher'}
endif
"}}}


"############################################ {{{
" NERDTree
"############################################
if (index(g:plugs_order, 'nerdtree') >= 0)
  " nnoremap <silent> <Leader>n :NERDTreeFocus<CR>
  augroup vim_nerdtree_keymap
    autocmd!
    autocmd VimEnter,WinEnter * nnoremap <Leader>N :NERDTreeFind<CR>
  augroup End
  let g:NERDTreeMapOpenSplit = 's'
  let g:NERDTreeMapOpenVSplit = 'v'
  let NERDTreeShowHidden = 1

  command! -nargs=? -complete=dir -bang CD  call s:ChangeCurrentDir('<args>', '<bang>')
  function! s:ChangeCurrentDir(directory, bang)
    if a:directory == ''
      lcd %:p:h
    else
      execute 'lcd' . a:directory
    endif

    if a:bang == ''
      pwd
    endif
  endfunction
endif
"}}}


"############################################ {{{
" vim NERDTree tabs
"############################################
if (index(g:plugs_order, 'vim-nerdtree-tabs') >= 0)
  let g:nerdtree_tabs_smart_startup_focus = 1
  let g:nerdtree_tabs_synchronize_focus = 1
  augroup vim_nerdtree_tabs_keymap
    autocmd!
    autocmd VimEnter,WinEnter * map <Leader>n <plug>NERDTreeTabsToggle<CR>
  augroup End
endif
"}}}


"############################################ {{{
" vim-airline
"############################################
if (index(g:plugs_order, 'vim-airline') >= 0)
  let g:airline#extensions#whitespace#enabled = 1
  let g:airline_inactive_collapse = 0
  let g:airline#extensions#branch#enabled = 1
  let g:airline#extensions#branch#empty_message = ''
  let g:airline#extensions#branch#format = 1
  let g:airline#extensions#bufferline#enabled = 1
  let g:airline#extensions#bufferline#overwrite_variables = 1
  let g:airline#extensions#syntastic#enabled = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#show_buffers = 0
  let g:airline#extensions#tagbar#enabled = 1
  let g:airline_left_sep=''
  let g:airline_right_sep=''
  let g:airline_theme = 'dark'
endif
"}}}


"############################################ {{{
" gitgutter
"############################################
if (index(g:plugs_order, 'vim-gitgutter') >= 0)
  augroup vim_gitgutter_keymap
    autocmd!
    autocmd VimEnter,WinEnter * nnoremap <buffer><Leader>ghs <Plug>(GitGutterStageHunk)
    autocmd VimEnter,WinEnter * nnoremap <buffer><Leader>ghu <Plug>(GitGutterUndoHunk)
    autocmd VimEnter,WinEnter * nnoremap <buffer><Leader>ghn <Plug>(GitGutterNextHunk)
    autocmd VimEnter,WinEnter * nnoremap <buffer><Leader>ghp <Plug>(GitGutterPrevHunk)
    autocmd VimEnter,WinEnter * nnoremap <buffer><Leader>gg :<C-u>GitGutterToggle<CR>
  augroup END
  let g:gitgutter_highlight_lines = 1
  let g:gitgutter_enabled = 0
endif
"}}}


"############################################ {{{
" fugitive
"############################################
if (index(g:plugs_order, 'vim-fugitive') >= 0)
  augroup vim_fugitive_keymap
    autocmd!
    autocmd VimEnter,WinEnter * nnoremap <buffer><Leader>gd :<C-u>Gdiffsplit<CR>
  augroup END
  let g:gitgutter_highlight_lines = 1
endif
"}}}


"############################################ {{{
" vim-table-mode
"############################################
if (index(g:plugs_order, 'vim-table-mode') >= 0)
  let g:table_mode_corner = '|'
endif
"}}}


"############################################ {{{
" vim-easy-align
"############################################
if (index(g:plugs_order, 'vim-easy-align') >= 0)
  augroup vim_eary_align_keymap
    autocmd!
    autocmd VimEnter,WinEnter * vmap <Enter> <Plug>(EasyAlign)
  augroup END
endif
"}}}


"############################################ {{{
" yankround
"############################################
if (index(g:plugs_order, 'yankround.vim') >= 0)
  augroup vim_yankround_keymap
    autocmd!
    autocmd VimEnter,WinEnter * nmap p <Plug>(yankround-p)
    autocmd VimEnter,WinEnter * xmap p <Plug>(yankround-p)
    autocmd VimEnter,VimEnter,WinEnter * nmap P <Plug>(yankround-P)
    autocmd VimEnter,WinEnter * nmap gp <Plug>(yankround-gp)
    autocmd VimEnter,WinEnter * xmap gp <Plug>(yankround-gp)
    autocmd VimEnter,WinEnter * nmap gP <Plug>(yankround-gP)
    autocmd VimEnter,WinEnter * nmap <C-p> <Plug>(yankround-prev)
    autocmd VimEnter,WinEnter * nmap <C-n> <Plug>(yankround-next)
  augroup END
endif
"}}}


"############################################ {{{
" vim-quickhl
"############################################
if (index(g:plugs_order, 'vim-quickhl') >= 0)
  augroup vim_quickhl_keymap
    autocmd!
    " 固定ハイライト
    autocmd VimEnter,WinEnter * nmap <Leader>m <Plug>(quickhl-manual-this)
    autocmd VimEnter,WinEnter * xmap <Leader>m <Plug>(quickhl-manual-this)
    " 一括解除
    autocmd VimEnter,WinEnter * nmap <Leader>M <Plug>(quickhl-manual-reset)
    autocmd VimEnter,WinEnter * xmap <Leader>M <Plug>(quickhl-manual-reset)
    " カーソル下の単語をハイライト。非固定
    autocmd VimEnter,WinEnter * nmap <Leader>j <Plug>(quickhl-cword-toggle)
  augroup END
endif
"}}}


"############################################ {{{
" vim-anzu
"############################################
if (index(g:plugs_order, 'vim-anzu') >= 0)
  augroup vim_anzu_keymap
    autocmd!
    autocmd VimEnter,WinEnter * nmap n nzz<Plug>(anzu-update-search-status)
    autocmd VimEnter,WinEnter * nmap N Nzz<Plug>(anzu-update-search-status)
    autocmd VimEnter,WinEnter * nmap * <Plug>(anzu-star)
    autocmd VimEnter,WinEnter * nmap # <Plug>(anzu-sharp)
  augroup END
endif
"}}}


"############################################ {{{
" vim-indent-guides
"############################################
if (index(g:plugs_order, 'vim-indent-guides') >= 0)
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level = 1
  let g:indent_guides_guide_size = &tabstop
  let g:indent_guides_auto_colors = 0
  augroup vim_indent_guides
    autocmd!
    autocmd VimEnter,Colorscheme * :hi SpecialKey term=bold ctermfg=9
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#414141 ctermfg=239 ctermbg=236
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#585858 ctermfg=236 ctermbg=239
  augroup END
endif
"}}}


"############################################ {{{
" tcomment_vim
"############################################
if (index(g:plugs_order, 'tcomment_vim') >= 0)
  if !exists('g:tcomment_types')
    let g:tcomment_types = {}
  endif
endif
"}}}


"############################################ {{{
" tyru/open-browser.vim
"############################################
if (index(g:plugs_order, 'open-browser.vim') >= 0)
  augroup vim_open_browser_keymap
    autocmd!
    autocmd VimEnter,WinEnter * vmap go <Plug>(openbrowser-smart-search)
  augroup END
endif
"}}}


"############################################ {{{
" incsearch.vim
"############################################
if (index(g:plugs_order, 'incsearch.vim') >= 0)
  augroup vim_incsearch_keymap
    autocmd!
    autocmd VimEnter,WinEnter * map /  <Plug>(incsearch-forward)
    autocmd VimEnter,WinEnter * map ?  <Plug>(incsearch-backward)
    autocmd VimEnter,WinEnter * map g/ <Plug>(incsearch-stay)
  augroup END
endif
"}}}


"############################################ {{{
" vim-smalls
"############################################
if (index(g:plugs_order, 'vim-smalls') >= 0)
  augroup vim_small_keymap
    autocmd!
    autocmd VimEnter,WinEnter * nmap <Leader>f <Plug>(smalls)
    autocmd VimEnter,WinEnter * omap <Leader>f <Plug>(smalls)
    autocmd VimEnter,WinEnter * xmap <Leader>f <Plug>(smalls)
  augroup END
endif
"}}}


"############################################ {{{
" vim-bufferline
"############################################
if (index(g:plugs_order, 'vim-bufferline') >= 0)
  let g:bufferline_modified = '[+]'
  let g:bufferline_echo = 0
  let g:bufferline_rotate = 1
  let g:bufferline_fixed_index = -2
  let g:bufferline_show_bufnr = 0
  " let g:bufferline_active_buffer_left = '['
  " let g:bufferline_active_buffer_right = ']'
endif
"}}}


"############################################ {{{
" undotree
"############################################
if (index(g:plugs_order, 'undotree') >= 0)
  augroup vim_undotree_keymap
    autocmd!
    autocmd VimEnter,WinEnter * nmap <Leader>U :UndotreeToggle<CR>
  augroup END
  let g:undotree_SetFocusWhenToggle = 1
  let g:undotree_WindowLayout = 'topright'
  let g:undotree_SplitWidth = 35
  let g:undotree_diffAutoOpen = 1
  let g:undotree_diffpanelHeight = 25
  let g:undotree_RelativeTimestamp = 1
  let g:undotree_TreeNodeShape = '*'
  let g:undotree_HighlightChangedText = 1
  let g:undotree_HighlightSyntax = "UnderLined"
endif
"}}}


"############################################ {{{
" molokai
"############################################
if (index(g:plugs_order, 'molokai') >= 0)
  colorscheme molokai
  let g:molokai_original = 1
  let g:rehash256 = 1
endif
"}}}


"############################################ {{{
" syntastic
"############################################
if (index(g:plugs_order, 'syntastic') >= 0)
  " let g:syntastic_enable_signs = 1
  let g:syntastic_mode_map = {'mode': 'passive', 'active_filetypes': []}
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_aggregate_errors = 1
  let g:syntastic_enable_signs = 1
  let g:syntastic_always_populate_loc_list = 0
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 0
  let g:syntastic_check_on_wq = 0

  let g:syntastic_go_checkers = ['go', 'golint']
  let g:syntastic_javascript_checkers = ['eslint']
  let g:syntastic_typescript_checkers = ['tslint']
  let g:syntastic_python_checkers = ['flake8']
  let g:syntastic_ruby_checkers = ['rubocop', 'mri']

  augroup vim_syntastic_keymap
    autocmd!
    autocmd VimEnter,WinEnter * nnoremap ,e :<C-u>SyntasticCheck<CR>
    autocmd VimEnter,WinEnter * nnoremap ,E :<C-u>SyntasticToggleMode<CR>
  augroup END
endif
"}}}


"############################################ {{{
" jedi-vim
"############################################
if (index(g:plugs_order, 'jedi-vim') >= 0)
  let g:jedi#auto_initialization = 1
  let g:jedi#completions_enabled = 1
  let g:jedi#auto_vim_configuration = 1

  let g:jedi#completions_command = "<C-n>"
  let g:jedi#goto_assignments_command = "<Leader>ldv"
  let g:jedi#goto_definitions_command = "<Leader>ldf"
  " let g:jedi#documentation_command = "<Leader>ldc"
  let g:jedi#rename_command = "<Leader>lr"
  let g:jedi#usages_command = "<Leader>lu"
  let g:jedi#popup_select_first = 0
  let g:jedi#popup_on_dot = 1

  augroup vim_jedi_keymap
    autocmd!
    autocmd FileType python setlocal completeopt-=preview
    " for w/ neocomplete
    autocmd FileType python setlocal omnifunc=jedi#completions
  augroup End
endif
"}}}


"############################################ {{{
" emmet-vim
"############################################
if (index(g:plugs_order, 'emmet-vim') >= 0)
  let g:user_emmet_leader_key = '<c-y>'
endif
"}}}


"############################################ {{{
" vim-jsx
"############################################
if (index(g:plugs_order, 'vim-jsx') >= 0)
  let g:jsx_ext_required = 0
endif
"}}}


"############################################ {{{
" vim-javascript
"############################################
if (index(g:plugs_order, 'vim-javascript') >= 0)
  let g:javascript_plugin_jsdoc = 1
endif
"}}}


"############################################ {{{
" tern_for_vim
"############################################
if (index(g:plugs_order, 'tern_for_vim') >= 0)
  augroup vim_tern_keymap
    autocmd!
    autocmd FileType javascript.jsx nmap <Leader>ldf :<C-u>TernDefPreview<CR>
    autocmd FileType javascript.jsx nmap <Leader>ldc :<C-u>TernDoc<CR>
    autocmd FileType javascript.jsx nmap <Leader>lt  :<C-u>TernType<CR>
    autocmd FileType javascript.jsx nmap <Leader>lrf :<C-u>TernRefs<CR>
    autocmd FileType javascript.jsx nmap <Leader>lre :<C-u>TernRename<CR>
  augroup END

  let g:tern_show_argument_hints = 'on_hold'
  " let g:tern_show_signature_in_pum = 1

endif
"}}}

"############################################ {{{
" vim-flow
"############################################
if (index(g:plugs_order, 'vim-flow') >= 0)
  let g:flow#omnifunc = 0
  let g:flow#timeout = 4
  let g:flow#showquickfix = 0
endif
"}}}

"############################################ {{{
" vim-go
"############################################
if (index(g:plugs_order, 'vim-go') >= 0)
  augroup vim_golang_keymap
    autocmd!
    autocmd FileType go nmap <buffer><Leader>ds <Plug>(go-def-split)
    autocmd FileType go nmap <buffer><Leader>dt <Plug>(go-def-tab)
    autocmd FileType go nmap <buffer><Leader>gd <Plug>(go-doc)
    autocmd FileType go nmap <buffer><Leader>gb <Plug>(go-doc-browser)
    autocmd FileType go nmap <buffer><Leader>gt <Plug>(go-test)
    autocmd FileType go nmap <buffer><Leader>gr <Plug>(go-run)
    autocmd FileType go nmap <buffer><Leader>s <Plug>(go-implements)
    autocmd FileType go nmap <buffer><Leader>i <Plug>(go-info)
    autocmd FileType go nmap <buffer><Leader>e <Plug>(go-rename)
  augroup END
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1

  let g:go_fmt_autosave = 1
  let g:go_fmt_command = "gofmt"

  let g:go_fmt_fail_silently = 1
endif
"}}}
